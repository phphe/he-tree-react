import{_ as a,c as s,o as t,a5 as e}from"./chunks/framework.BthLuVtL.js";const g=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"zh/v1/api.md","filePath":"zh/v1/api.md","lastUpdated":1709830051000}'),i={name:"zh/v1/api.md"},n=e(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><h2 id="导出" tabindex="-1">导出 <a class="header-anchor" href="#导出" aria-label="Permalink to &quot;导出&quot;">​</a></h2><p>此库导出的变量, 方法, Typescript 类型.</p><ul><li><a href="#usehetree"><code>useHeTree</code></a>: 主要的 React hook. 本库没有导出组件, 你需要使用此函数返回的<a href="#rendertree"><code>renderTree</code></a>渲染树.</li><li><a href="#walktreedata"><code>walkTreeData</code></a>, <a href="#walktreedatagenerator"><code>walkTreeDataGenerator</code></a>, <a href="#findtreedata"><code>findTreeData</code></a>, <a href="#filtertreedata"><code>filterTreeData</code></a>, <a href="#openparentsintreedata"><code>openParentsInTreeData</code></a>, <a href="#updatecheckedintreedata"><code>updateCheckedInTreeData</code></a>: 用来处理和遍历树形数据的方法.</li><li><a href="#sortflatdata"><code>sortFlatData</code></a>, <a href="#walkflatdata"><code>walkFlatData</code></a>, <a href="#walkflatdatagenerator"><code>walkFlatDataGenerator</code></a>, <a href="#convertindextotreeindexinflatdata"><code>convertIndexToTreeIndexInFlatData</code></a>, <a href="#addtoflatdata"><code>addToFlatData</code></a>, <a href="#removebyidinflatdata"><code>removeByIdInFlatData</code></a>, <a href="#openparentsinflatdata"><code>openParentsInFlatData</code></a>, <a href="#updatecheckedinflatdata"><code>updateCheckedInFlatData</code></a>: 用来处理和遍历扁平数据的方法.</li><li><a href="#walkparentsgenerator"><code>walkParentsGenerator</code></a>: 遍历另一种特殊数据的方法. 这种数据类似<code>HTMLElement</code>, 其中包含类似于<code>parentElement</code>的指向父节点的键.</li><li><code>defaultProps</code>: <code>useHeTree</code>的选项的默认值.</li></ul><p>以下为 Typescript 的类型:</p><ul><li><code>Id</code>: 节点 id, 父级 id. 类型: <code>string | number</code>.</li><li><a href="#stat"><code>Stat</code></a>: 节点的相关信息.</li><li><code>HeTreeProps</code>: <code>useHeTree</code>的选项.</li></ul><h2 id="usehetree" tabindex="-1">useHeTree <a class="header-anchor" href="#usehetree" aria-label="Permalink to &quot;useHeTree&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useHeTree } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;he-tree-react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* return */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useHeTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* options */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// prettier-ignore</span></span></code></pre></div><p>本库的主要功能. React hook. 参数如下:</p><ul><li><p>options: 选项, 类型是对象. 以下是 options 中的部分属性:</p><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td>data<a id="data"></a></td><td>Array</td><td></td><td style="text-align:left;">数据. 参考<a href="./guide#数据类型">数据类型</a>.</td></tr><tr><td>dataType<a id="datatype"></a></td><td>&#39;flat&#39;, &#39;tree&#39;</td><td>&#39;flat&#39;</td><td style="text-align:left;">数据类型</td></tr><tr><td>idKey<a id="idkey"></a></td><td>string</td><td>&#39;id&#39;</td><td style="text-align:left;">你的数据中 id 的键名.</td></tr><tr><td>parentIdKey<a id="parentidkey"></a></td><td>string</td><td>&#39;parent_id&#39;</td><td style="text-align:left;">你的数据中父级 id 的键名. 仅用于扁平数据.</td></tr><tr><td>childrenKey<a id="childrenkey"></a></td><td>string</td><td>&#39;children&#39;</td><td style="text-align:left;">你的数据中子级的键名. 仅用于树形数据.</td></tr><tr><td>indent<a id="indent"></a></td><td>number</td><td>20</td><td style="text-align:left;">节点缩进, 单位是 px.</td></tr><tr><td>dragOpen<a id="dragopen"></a></td><td>boolean</td><td>false</td><td style="text-align:left;">是否启用功能&quot;拖拽到节点上时打开节点&quot;.</td></tr><tr><td>dragOpenDelay<a id="dragopendelay"></a></td><td>number</td><td>600</td><td style="text-align:left;">拖拽到节点上时打开节点的等待时间. 单位是毫秒.</td></tr><tr><td>onDragOpen<a id="ondragopen"></a></td><td><code>function(stat): void</code></td><td></td><td style="text-align:left;">拖拽到节点上时打开节点的回调.</td></tr><tr><td>direction<a id="direction"></a></td><td>&#39;lrt&#39;, &#39;rtl&#39;</td><td>&#39;ltr&#39;</td><td style="text-align:left;">显示方向, ltr 是从左往右显示, rtl 与之相反.</td></tr><tr><td>rootId<a id="rootid"></a></td><td>string, null</td><td>null</td><td style="text-align:left;">使用扁平数据时, 没有父级的节点的父级 id.</td></tr><tr><td>virtual<a id="virtual"></a></td><td>boolean</td><td>false</td><td style="text-align:left;">是否启用虚拟化. 当数据非常多时用来提高性能.</td></tr><tr><td>keepPlaceholder<a id="keepplaceholder"></a></td><td>boolean</td><td>false</td><td style="text-align:left;">当拖拽离开树的范围, 是否要保留占位元素. 建议只在一个树的页面开启此项.</td></tr><tr><td>openIds<a id="openids"></a></td><td>Array</td><td></td><td style="text-align:left;">所有打开节点的 id.</td></tr><tr><td>checkedIds<a id="checkedids"></a></td><td>Array</td><td></td><td style="text-align:left;">所有勾选的节点的 id.</td></tr><tr><td>isFunctionReactive<a id="isfunctionreactive"></a></td><td>boolean</td><td>false</td><td style="text-align:left;">是否监听回调函数的改变. <a href="./guide#isfunctionreactive">参考</a></td></tr></tbody></table><p>以下是 options 中的剩余回调方法:</p><table><thead><tr><th>名称</th><th>类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td>renderNode<a id="rendernode"></a></td><td><code>(stat)=&gt; ReactNode</code></td><td style="text-align:left;">节点的渲染函数.</td></tr><tr><td>renderNodeBox<a id="rendernodebox"></a></td><td><code>({stat, attrs, isPlaceholder})=&gt; ReactNode</code></td><td style="text-align:left;">nodeBox 的渲染函数. <a href="./guide#node_structure_style">参考</a>.</td></tr><tr><td>onChange<a id="onchange"></a></td><td><code>(newData)=&gt;void</code></td><td style="text-align:left;">数据发生改变时调用.</td></tr><tr><td>canDrag<a id="candrag"></a></td><td><code>(stat)=&gt;boolean, null, undefined, void</code></td><td style="text-align:left;">节点是否可拖拽. 返回<code>null, undefined, void</code>表示继承父节点.</td></tr><tr><td>canDrop<a id="candrop"></a></td><td><code>(stat, index)=&gt;boolean, null, undefined, void</code></td><td style="text-align:left;">节点是否可放入. 返回<code>null, undefined, void</code>表示继承父节点. 参数<code>index</code>可能为空, 不为空时表示将要放入节点的子级的位置.</td></tr><tr><td>customDragImage<a id="customdragimage"></a></td><td><code>(event, stat)=&gt; void</code></td><td style="text-align:left;">调用<code>event.dataTransfer.setDragImage</code>自定义 drag image. <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage" target="_blank" rel="noreferrer">参考</a>.</td></tr><tr><td>onDragStart<a id="ondragstart"></a></td><td><code>(event, stat)=&gt; void</code></td><td style="text-align:left;">当拖拽开始时</td></tr><tr><td>onExternalDragOver<a id="onexternaldragover"></a></td><td><code>(event)=&gt;boolean</code></td><td style="text-align:left;">当拖拽来自外部时调用. 你必选返回布尔值表示是否处理此拖拽.</td></tr><tr><td>onDragOver<a id="ondragover"></a></td><td><code>(event, stat, isExternal)=&gt; void</code></td><td style="text-align:left;">当拖拽到树上方时, <code>isExternal</code>表示此次拖拽是否来自外部.</td></tr><tr><td>onDragEnd<a id="ondragend"></a></td><td><code>(event, stat, isOutside)=&gt;void</code></td><td style="text-align:left;">当此树发起的拖拽结束时调用. stat 是此次拖拽的节点的 stat.isOutside 表示是否在树外部结束.</td></tr><tr><td>onExternalDrop<a id="onexternaldrop"></a></td><td><code>(event, parentStat, index)=&gt;void</code></td><td style="text-align:left;">当外部拖拽在此树结束时调用. parentStat 是目标父节点的 stat, 为空时代表树的根级. index 是目标位置, 即节点在兄弟节点中的索引.</td></tr></tbody></table></li></ul><h3 id="usehetree的返回" tabindex="-1"><code>useHeTree</code>的返回 <a class="header-anchor" href="#usehetree的返回" aria-label="Permalink to &quot;\`useHeTree\`的返回&quot;">​</a></h3><p><code>useHeTree</code>的返回是对象, 包含了一些 states 和方法. <strong>注意</strong>, 这个对象每次更新都会改变, 不要依赖这个对象, 可以依赖这个对象的属性. 属性如下:</p><table><thead><tr><th>名称</th><th>类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td>renderTree<a id="rendertree"></a></td><td><code>(options?: { className?: string, style?: React.CSSProperties }): ReactNode</code></td><td style="text-align:left;">渲染树. 参数可以传入<code>className</code>和<code>style</code>控制根元素的样式.</td></tr><tr><td>getStat<a id="getstat"></a></td><td><code>(idOrNodeOrStat)=&gt;stat</code></td><td style="text-align:left;">根据 id, 节点数据或 stat, 获得对应的 stat.</td></tr><tr><td>allIds<a id="allids"></a></td><td>数组</td><td style="text-align:left;">所有节点的 id.</td></tr><tr><td>rootIds<a id="rootids"></a></td><td>数组</td><td style="text-align:left;">树根级的所有节点的 id.</td></tr><tr><td>rootNodes<a id="rootnodes"></a></td><td>数组</td><td style="text-align:left;">树根级的所有节点的数据. 如果是树形数据, 它就是选项中的<code>data</code>.</td></tr><tr><td>rootStats<a id="rootstats"></a></td><td>数组</td><td style="text-align:left;">树根级的所有节点的 stat.</td></tr><tr><td>placeholder<a id="placeholder"></a></td><td><code>{parentStat, index, level}</code></td><td style="text-align:left;">拖拽时占位节点的信息. 占位节点不存在时为空.</td></tr><tr><td>draggingStat<a id="draggingstat"></a></td><td><code>stat</code></td><td style="text-align:left;">由此树发起拖拽时, 被拖拽的节点的 stat. 不存在时为空.</td></tr><tr><td>dragOverStat<a id="dragoverstat"></a></td><td><code>stat</code></td><td style="text-align:left;">拖拽到其上面的节点. 可能为空.</td></tr><tr><td>visibleIds<a id="visibleids"></a></td><td>数组</td><td style="text-align:left;">显示的所有节点的 id.</td></tr><tr><td>attrsList<a id="attrslist"></a></td><td>数组</td><td style="text-align:left;">显示的所有节点的 attrs.</td></tr><tr><td>virtualListRef<a id="virtuallistref"></a></td><td><code>ref</code></td><td style="text-align:left;">虚拟列表组件的 ref, 参考<a href="https://github.com/phphe/react-base-virtual-list" target="_blank" rel="noreferrer">虚拟列表</a>.</td></tr><tr><td>scrollToNode<a id="scrolltonode"></a></td><td><code>(idOrNodeOrStat)=&gt;boolean</code></td><td style="text-align:left;">滚动到节点. 参数可以是 id, 节点数据或 stat. 如果节点未找到或未显示, 返回<code>false</code>. <a href="./examples#scroll_to_node2">例子</a></td></tr></tbody></table><h2 id="walktreedatagenerator" tabindex="-1">walkTreeDataGenerator <a class="header-anchor" href="#walktreedatagenerator" aria-label="Permalink to &quot;walkTreeDataGenerator&quot;">​</a></h2><p>通过<code>for of</code>遍历树形数据的方法. 循环中执行<code>skipChildren()</code>将跳过该节点的所有子节点, 执行<code>exitWalk</code>将结束遍历.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skipChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exitWalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> walkTreeDataGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;children&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="walktreedata" tabindex="-1">walkTreeData <a class="header-anchor" href="#walktreedata" aria-label="Permalink to &quot;walkTreeData&quot;">​</a></h2><p>通过回调方法遍历树形数据的方法. 回调方法中执行<code>skipChildren()</code>将跳过该节点的所有子节点, 执行<code>exitWalk</code>将结束遍历.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walkTreeDataGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">skipChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exitWalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;children&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="findtreedata" tabindex="-1">findTreeData <a class="header-anchor" href="#findtreedata" aria-label="Permalink to &quot;findTreeData&quot;">​</a></h2><p>类似 <code>Array.prototype.find</code>. 返回找到的第一个节点. 回调方法中执行<code>skipChildren()</code>将跳过该节点的所有子节点, 执行<code>exitWalk</code>将结束遍历.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foundNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findTreeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">skipChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exitWalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // return node.id === 1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;children&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="filtertreedata" tabindex="-1">filterTreeData <a class="header-anchor" href="#filtertreedata" aria-label="Permalink to &quot;filterTreeData&quot;">​</a></h2><p>类似 <code>Array.prototype.filter</code>. 返回找到的所有节点. 回调方法中执行<code>skipChildren()</code>将跳过该节点的所有子节点, 执行<code>exitWalk</code>将结束遍历.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filterTreeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">skipChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exitWalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // return node.id &gt; 1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;children&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="openparentsintreedata" tabindex="-1">openParentsInTreeData <a class="header-anchor" href="#openparentsintreedata" aria-label="Permalink to &quot;openParentsInTreeData&quot;">​</a></h2><p>打开单个或多个节点的所有父节点, 这样才能确保该节点可见. <a href="./guide#node_open">参考</a>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  treeData,</span></span>
<span class="line"><span>  openIds: Id[],</span></span>
<span class="line"><span>  idOrIds: Id | Id[],</span></span>
<span class="line"><span>  options?: {idKey: string, childrenKey: string}</span></span>
<span class="line"><span>): newOpenIds</span></span></code></pre></div><h2 id="updatecheckedintreedata" tabindex="-1">updateCheckedInTreeData <a class="header-anchor" href="#updatecheckedintreedata" aria-label="Permalink to &quot;updateCheckedInTreeData&quot;">​</a></h2><p>更新单个节点或多个节点的<code>checked</code>状态. 这将同时更新它们的子节点和父节点. <a href="./guide#node_checked">参考</a>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  treeData,</span></span>
<span class="line"><span>  checkedIds: Id[],</span></span>
<span class="line"><span>  idOrIds: Id | Id[],</span></span>
<span class="line"><span>  checked: boolean,</span></span>
<span class="line"><span>  options?: {idKey: string, childrenKey: string}</span></span>
<span class="line"><span>): [newCheckedIds, newSemiCheckedIds]</span></span></code></pre></div><h2 id="sortflatdata" tabindex="-1">sortFlatData <a class="header-anchor" href="#sortflatdata" aria-label="Permalink to &quot;sortFlatData&quot;">​</a></h2><p>把扁平数据按照节点在树里的顺序排序. 返回排序后的新数组. 你的数据在初始化时应该使用它以保证顺序.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  flatData,</span></span>
<span class="line"><span>  options?: {idKey: string, parentIdKey: string}</span></span>
<span class="line"><span>): sortedData</span></span></code></pre></div><h2 id="walkflatdatagenerator" tabindex="-1">walkFlatDataGenerator <a class="header-anchor" href="#walkflatdatagenerator" aria-label="Permalink to &quot;walkFlatDataGenerator&quot;">​</a></h2><p>通过<code>for of</code>遍历扁平数据的方法. 循环中执行<code>skipChildren()</code>将跳过该节点的所有子节点, 执行<code>exitWalk</code>将结束遍历. 使用前需确保你的数据的顺序是正确的.</p><p>相比于<code>walkTreeDataGenerator</code>, 少了<code>siblings</code>, 多了 <code>treeIndex, id, pid</code>. <code>treeIndex</code>是节点在整个树中的索引.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">treeIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skipChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exitWalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> walkFlatDataGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flatData, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  idKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parentIdKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parent_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="walkflatdata" tabindex="-1">walkFlatData <a class="header-anchor" href="#walkflatdata" aria-label="Permalink to &quot;walkFlatData&quot;">​</a></h2><p>通过回调方法遍历扁平数据的方法. 回调方法中执行<code>skipChildren()</code>将跳过该节点的所有子节点, 执行<code>exitWalk</code>将结束遍历. 使用前需确保你的数据的顺序是正确的.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walkFlatData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  flatData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    node,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { parent, parents, index, treeIndex, id, pid, skipChildren, exitWalk }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    idKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parentIdKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parent_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="openparentsinflatdata" tabindex="-1">openParentsInFlatData <a class="header-anchor" href="#openparentsinflatdata" aria-label="Permalink to &quot;openParentsInFlatData&quot;">​</a></h2><p>打开单个或多个节点的所有父节点, 这样才能确保该节点可见. 用前需确保你的数据的顺序是正确的. <a href="./guide#node_open">参考</a>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  flatData,</span></span>
<span class="line"><span>  openIds: Id[],</span></span>
<span class="line"><span>  idOrIds: Id | Id[],</span></span>
<span class="line"><span>  options?: {</span></span>
<span class="line"><span>    idKey: &quot;id&quot;,</span></span>
<span class="line"><span>    parentIdKey: &quot;parent_id&quot;,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>): newOpenIds</span></span></code></pre></div><h2 id="updatecheckedinflatdata" tabindex="-1">updateCheckedInFlatData <a class="header-anchor" href="#updatecheckedinflatdata" aria-label="Permalink to &quot;updateCheckedInFlatData&quot;">​</a></h2><p>更新单个节点或多个节点的<code>checked</code>状态. 这将同时更新它们的子节点和父节点. 用前需确保你的数据的顺序是正确的. <a href="./guide#node_checked">参考</a>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  flatData,</span></span>
<span class="line"><span>  checkedIds: Id[],</span></span>
<span class="line"><span>  idOrIds: Id | Id[],</span></span>
<span class="line"><span>  checked: boolean,</span></span>
<span class="line"><span>  options?: {</span></span>
<span class="line"><span>    idKey: &quot;id&quot;,</span></span>
<span class="line"><span>    parentIdKey: &quot;parent_id&quot;,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>): [newCheckedIds, newSemiCheckedIds]</span></span></code></pre></div><h2 id="convertindextotreeindexinflatdata" tabindex="-1">convertIndexToTreeIndexInFlatData <a class="header-anchor" href="#convertindextotreeindexinflatdata" aria-label="Permalink to &quot;convertIndexToTreeIndexInFlatData&quot;">​</a></h2><p>通过某节点的父节点 id 和它在兄弟节点中的索引, 计算出它在整棵树中的索引.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  flatData,</span></span>
<span class="line"><span>  parentId: Id | null,</span></span>
<span class="line"><span>  indexInSiblings: Id | null,</span></span>
<span class="line"><span>  options?: {</span></span>
<span class="line"><span>    idKey: &quot;id&quot;,</span></span>
<span class="line"><span>    parentIdKey: &quot;parent_id&quot;,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>): treeIndex</span></span></code></pre></div><h2 id="addtoflatdata" tabindex="-1">addToFlatData <a class="header-anchor" href="#addtoflatdata" aria-label="Permalink to &quot;addToFlatData&quot;">​</a></h2><p>向扁平数据添加一个节点. 它会改变原数据数组. 所以推荐传入原始数据的拷贝, 或者与<code>useImmer</code>一起使用. <a href="./guide#update_flat_data_with_inner_methods2">参考</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  flatData,</span></span>
<span class="line"><span>  newNode,</span></span>
<span class="line"><span>  index: Id | null,</span></span>
<span class="line"><span>  options?: {</span></span>
<span class="line"><span>    idKey: &quot;id&quot;,</span></span>
<span class="line"><span>    parentIdKey: &quot;parent_id&quot;,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>):void</span></span></code></pre></div><h2 id="removebyidinflatdata" tabindex="-1">removeByIdInFlatData <a class="header-anchor" href="#removebyidinflatdata" aria-label="Permalink to &quot;removeByIdInFlatData&quot;">​</a></h2><p>从扁平数据删除一个节点. 返回被删除的数据. 它会改变原数据数组. 所以推荐传入原始数据的拷贝, 或者与<code>useImmer</code>一起使用. <a href="./guide#update_flat_data_with_inner_methods2">参考</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  flatData,</span></span>
<span class="line"><span>  removeId: Id | null,</span></span>
<span class="line"><span>  options?: {</span></span>
<span class="line"><span>    idKey: &quot;id&quot;,</span></span>
<span class="line"><span>    parentIdKey: &quot;parent_id&quot;,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>): removedData</span></span></code></pre></div><h2 id="walkparentsgenerator" tabindex="-1">walkParentsGenerator <a class="header-anchor" href="#walkparentsgenerator" aria-label="Permalink to &quot;walkParentsGenerator&quot;">​</a></h2><p>遍历另一种特殊数据的方法. 这种数据类似<code>HTMLElement</code>, 其中包含类似于<code>parentElement</code>的指向父节点的键.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(</span></span>
<span class="line"><span>  node,</span></span>
<span class="line"><span>  parentKeyOrGetter: string | ((node) =&gt; parent | undefined),</span></span>
<span class="line"><span>  options?: {</span></span>
<span class="line"><span>    withSelf: boolean;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>): Generator</span></span></code></pre></div><p><code>parentKeyOrGetter</code>可以是字符串或者返回父级的方法. <code>options.withSelf</code>表示是否包括传入的节点. 返回 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noreferrer">Generator</a>. 下面是遍历 HTMLElement 的例子:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> walkParentsGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parentElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  withSelf: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="stat" tabindex="-1">Stat <a class="header-anchor" href="#stat" aria-label="Permalink to &quot;Stat&quot;">​</a></h2><p><code>stat</code>包括和节点有关的信息. 只读. 属性如下:</p><table><thead><tr><th>名称</th><th>类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td>_isStat</td><td>boolean</td><td style="text-align:left;">表明是否是 stat 对象</td></tr><tr><td>node</td><td>object</td><td style="text-align:left;">节点的数据</td></tr><tr><td>id</td><td>Id</td><td style="text-align:left;">id</td></tr><tr><td>pid</td><td>Id, null</td><td style="text-align:left;">节点的父级 id</td></tr><tr><td>parent</td><td>object, null</td><td style="text-align:left;">父节点的数据</td></tr><tr><td>parentStat</td><td>stat, null</td><td style="text-align:left;">父节点的 stat</td></tr><tr><td>childIds</td><td>Id[]</td><td style="text-align:left;">子节点的 id 数组</td></tr><tr><td>children</td><td>object[]</td><td style="text-align:left;">子节点数组</td></tr><tr><td>childStats</td><td>stat[]</td><td style="text-align:left;">子节点的 stat 数组</td></tr><tr><td>siblingIds</td><td>Id[]</td><td style="text-align:left;">兄弟节点的 id 数组</td></tr><tr><td>siblings</td><td>object[]</td><td style="text-align:left;">兄弟节点数组</td></tr><tr><td>siblingStats</td><td>stat[]</td><td style="text-align:left;">兄弟节点的 stat 数组</td></tr><tr><td>index</td><td>number</td><td style="text-align:left;">节点在兄弟节点中的索引</td></tr><tr><td>level</td><td>number</td><td style="text-align:left;">节点在树中的深度. 从 1 开始</td></tr><tr><td>open</td><td>boolean</td><td style="text-align:left;">是否展开</td></tr><tr><td>checked</td><td>boolean</td><td style="text-align:left;">是否勾选</td></tr><tr><td>draggable</td><td>boolean</td><td style="text-align:left;">是否可拖动</td></tr></tbody></table>`,64),d=[n];function l(p,h,r,k,o,c){return t(),s("div",null,d)}const y=a(i,[["render",l]]);export{g as __pageData,y as default};
